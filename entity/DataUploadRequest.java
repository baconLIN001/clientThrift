/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bacon.clientThrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-16")
public class DataUploadRequest implements org.apache.thrift.TBase<DataUploadRequest, DataUploadRequest._Fields>, java.io.Serializable, Cloneable, Comparable<DataUploadRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataUploadRequest");

  private static final org.apache.thrift.protocol.TField REQUEST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SECURITY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("securityLevel", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ORIGIN_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("originStr", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REGEX_FIELD_DESC = new org.apache.thrift.protocol.TField("regex", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILED_NAME_SPLITED_FIELD_DESC = new org.apache.thrift.protocol.TField("filedNameSplited", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField FILED_NAME_AES_FIELD_DESC = new org.apache.thrift.protocol.TField("filedNameAES", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField AESPRI_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("AESPriKey", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataUploadRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataUploadRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see RequestType
   */
  public RequestType requestType; // required
  public String path; // required
  public int securityLevel; // required
  public String originStr; // optional
  public String regex; // optional
  public List<String> filedNameSplited; // optional
  public List<String> filedNameAES; // optional
  public String AESPriKey; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RequestType
     */
    REQUEST_TYPE((short)1, "requestType"),
    PATH((short)2, "path"),
    SECURITY_LEVEL((short)3, "securityLevel"),
    ORIGIN_STR((short)4, "originStr"),
    REGEX((short)5, "regex"),
    FILED_NAME_SPLITED((short)6, "filedNameSplited"),
    FILED_NAME_AES((short)7, "filedNameAES"),
    AESPRI_KEY((short)8, "AESPriKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_TYPE
          return REQUEST_TYPE;
        case 2: // PATH
          return PATH;
        case 3: // SECURITY_LEVEL
          return SECURITY_LEVEL;
        case 4: // ORIGIN_STR
          return ORIGIN_STR;
        case 5: // REGEX
          return REGEX;
        case 6: // FILED_NAME_SPLITED
          return FILED_NAME_SPLITED;
        case 7: // FILED_NAME_AES
          return FILED_NAME_AES;
        case 8: // AESPRI_KEY
          return AESPRI_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SECURITYLEVEL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORIGIN_STR,_Fields.REGEX,_Fields.FILED_NAME_SPLITED,_Fields.FILED_NAME_AES,_Fields.AESPRI_KEY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("requestType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RequestType.class)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECURITY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("securityLevel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORIGIN_STR, new org.apache.thrift.meta_data.FieldMetaData("originStr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGEX, new org.apache.thrift.meta_data.FieldMetaData("regex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILED_NAME_SPLITED, new org.apache.thrift.meta_data.FieldMetaData("filedNameSplited", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FILED_NAME_AES, new org.apache.thrift.meta_data.FieldMetaData("filedNameAES", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AESPRI_KEY, new org.apache.thrift.meta_data.FieldMetaData("AESPriKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataUploadRequest.class, metaDataMap);
  }

  public DataUploadRequest() {
  }

  public DataUploadRequest(
    RequestType requestType,
    String path,
    int securityLevel)
  {
    this();
    this.requestType = requestType;
    this.path = path;
    this.securityLevel = securityLevel;
    setSecurityLevelIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataUploadRequest(DataUploadRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequestType()) {
      this.requestType = other.requestType;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    this.securityLevel = other.securityLevel;
    if (other.isSetOriginStr()) {
      this.originStr = other.originStr;
    }
    if (other.isSetRegex()) {
      this.regex = other.regex;
    }
    if (other.isSetFiledNameSplited()) {
      List<String> __this__filedNameSplited = new ArrayList<String>(other.filedNameSplited);
      this.filedNameSplited = __this__filedNameSplited;
    }
    if (other.isSetFiledNameAES()) {
      List<String> __this__filedNameAES = new ArrayList<String>(other.filedNameAES);
      this.filedNameAES = __this__filedNameAES;
    }
    if (other.isSetAESPriKey()) {
      this.AESPriKey = other.AESPriKey;
    }
  }

  public DataUploadRequest deepCopy() {
    return new DataUploadRequest(this);
  }

  @Override
  public void clear() {
    this.requestType = null;
    this.path = null;
    setSecurityLevelIsSet(false);
    this.securityLevel = 0;
    this.originStr = null;
    this.regex = null;
    this.filedNameSplited = null;
    this.filedNameAES = null;
    this.AESPriKey = null;
  }

  /**
   * 
   * @see RequestType
   */
  public RequestType getRequestType() {
    return this.requestType;
  }

  /**
   * 
   * @see RequestType
   */
  public DataUploadRequest setRequestType(RequestType requestType) {
    this.requestType = requestType;
    return this;
  }

  public void unsetRequestType() {
    this.requestType = null;
  }

  /** Returns true if field requestType is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestType() {
    return this.requestType != null;
  }

  public void setRequestTypeIsSet(boolean value) {
    if (!value) {
      this.requestType = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public DataUploadRequest setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public int getSecurityLevel() {
    return this.securityLevel;
  }

  public DataUploadRequest setSecurityLevel(int securityLevel) {
    this.securityLevel = securityLevel;
    setSecurityLevelIsSet(true);
    return this;
  }

  public void unsetSecurityLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECURITYLEVEL_ISSET_ID);
  }

  /** Returns true if field securityLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurityLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __SECURITYLEVEL_ISSET_ID);
  }

  public void setSecurityLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECURITYLEVEL_ISSET_ID, value);
  }

  public String getOriginStr() {
    return this.originStr;
  }

  public DataUploadRequest setOriginStr(String originStr) {
    this.originStr = originStr;
    return this;
  }

  public void unsetOriginStr() {
    this.originStr = null;
  }

  /** Returns true if field originStr is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginStr() {
    return this.originStr != null;
  }

  public void setOriginStrIsSet(boolean value) {
    if (!value) {
      this.originStr = null;
    }
  }

  public String getRegex() {
    return this.regex;
  }

  public DataUploadRequest setRegex(String regex) {
    this.regex = regex;
    return this;
  }

  public void unsetRegex() {
    this.regex = null;
  }

  /** Returns true if field regex is set (has been assigned a value) and false otherwise */
  public boolean isSetRegex() {
    return this.regex != null;
  }

  public void setRegexIsSet(boolean value) {
    if (!value) {
      this.regex = null;
    }
  }

  public int getFiledNameSplitedSize() {
    return (this.filedNameSplited == null) ? 0 : this.filedNameSplited.size();
  }

  public java.util.Iterator<String> getFiledNameSplitedIterator() {
    return (this.filedNameSplited == null) ? null : this.filedNameSplited.iterator();
  }

  public void addToFiledNameSplited(String elem) {
    if (this.filedNameSplited == null) {
      this.filedNameSplited = new ArrayList<String>();
    }
    this.filedNameSplited.add(elem);
  }

  public List<String> getFiledNameSplited() {
    return this.filedNameSplited;
  }

  public DataUploadRequest setFiledNameSplited(List<String> filedNameSplited) {
    this.filedNameSplited = filedNameSplited;
    return this;
  }

  public void unsetFiledNameSplited() {
    this.filedNameSplited = null;
  }

  /** Returns true if field filedNameSplited is set (has been assigned a value) and false otherwise */
  public boolean isSetFiledNameSplited() {
    return this.filedNameSplited != null;
  }

  public void setFiledNameSplitedIsSet(boolean value) {
    if (!value) {
      this.filedNameSplited = null;
    }
  }

  public int getFiledNameAESSize() {
    return (this.filedNameAES == null) ? 0 : this.filedNameAES.size();
  }

  public java.util.Iterator<String> getFiledNameAESIterator() {
    return (this.filedNameAES == null) ? null : this.filedNameAES.iterator();
  }

  public void addToFiledNameAES(String elem) {
    if (this.filedNameAES == null) {
      this.filedNameAES = new ArrayList<String>();
    }
    this.filedNameAES.add(elem);
  }

  public List<String> getFiledNameAES() {
    return this.filedNameAES;
  }

  public DataUploadRequest setFiledNameAES(List<String> filedNameAES) {
    this.filedNameAES = filedNameAES;
    return this;
  }

  public void unsetFiledNameAES() {
    this.filedNameAES = null;
  }

  /** Returns true if field filedNameAES is set (has been assigned a value) and false otherwise */
  public boolean isSetFiledNameAES() {
    return this.filedNameAES != null;
  }

  public void setFiledNameAESIsSet(boolean value) {
    if (!value) {
      this.filedNameAES = null;
    }
  }

  public String getAESPriKey() {
    return this.AESPriKey;
  }

  public DataUploadRequest setAESPriKey(String AESPriKey) {
    this.AESPriKey = AESPriKey;
    return this;
  }

  public void unsetAESPriKey() {
    this.AESPriKey = null;
  }

  /** Returns true if field AESPriKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAESPriKey() {
    return this.AESPriKey != null;
  }

  public void setAESPriKeyIsSet(boolean value) {
    if (!value) {
      this.AESPriKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST_TYPE:
      if (value == null) {
        unsetRequestType();
      } else {
        setRequestType((RequestType)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case SECURITY_LEVEL:
      if (value == null) {
        unsetSecurityLevel();
      } else {
        setSecurityLevel((Integer)value);
      }
      break;

    case ORIGIN_STR:
      if (value == null) {
        unsetOriginStr();
      } else {
        setOriginStr((String)value);
      }
      break;

    case REGEX:
      if (value == null) {
        unsetRegex();
      } else {
        setRegex((String)value);
      }
      break;

    case FILED_NAME_SPLITED:
      if (value == null) {
        unsetFiledNameSplited();
      } else {
        setFiledNameSplited((List<String>)value);
      }
      break;

    case FILED_NAME_AES:
      if (value == null) {
        unsetFiledNameAES();
      } else {
        setFiledNameAES((List<String>)value);
      }
      break;

    case AESPRI_KEY:
      if (value == null) {
        unsetAESPriKey();
      } else {
        setAESPriKey((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_TYPE:
      return getRequestType();

    case PATH:
      return getPath();

    case SECURITY_LEVEL:
      return getSecurityLevel();

    case ORIGIN_STR:
      return getOriginStr();

    case REGEX:
      return getRegex();

    case FILED_NAME_SPLITED:
      return getFiledNameSplited();

    case FILED_NAME_AES:
      return getFiledNameAES();

    case AESPRI_KEY:
      return getAESPriKey();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_TYPE:
      return isSetRequestType();
    case PATH:
      return isSetPath();
    case SECURITY_LEVEL:
      return isSetSecurityLevel();
    case ORIGIN_STR:
      return isSetOriginStr();
    case REGEX:
      return isSetRegex();
    case FILED_NAME_SPLITED:
      return isSetFiledNameSplited();
    case FILED_NAME_AES:
      return isSetFiledNameAES();
    case AESPRI_KEY:
      return isSetAESPriKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataUploadRequest)
      return this.equals((DataUploadRequest)that);
    return false;
  }

  public boolean equals(DataUploadRequest that) {
    if (that == null)
      return false;

    boolean this_present_requestType = true && this.isSetRequestType();
    boolean that_present_requestType = true && that.isSetRequestType();
    if (this_present_requestType || that_present_requestType) {
      if (!(this_present_requestType && that_present_requestType))
        return false;
      if (!this.requestType.equals(that.requestType))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_securityLevel = true;
    boolean that_present_securityLevel = true;
    if (this_present_securityLevel || that_present_securityLevel) {
      if (!(this_present_securityLevel && that_present_securityLevel))
        return false;
      if (this.securityLevel != that.securityLevel)
        return false;
    }

    boolean this_present_originStr = true && this.isSetOriginStr();
    boolean that_present_originStr = true && that.isSetOriginStr();
    if (this_present_originStr || that_present_originStr) {
      if (!(this_present_originStr && that_present_originStr))
        return false;
      if (!this.originStr.equals(that.originStr))
        return false;
    }

    boolean this_present_regex = true && this.isSetRegex();
    boolean that_present_regex = true && that.isSetRegex();
    if (this_present_regex || that_present_regex) {
      if (!(this_present_regex && that_present_regex))
        return false;
      if (!this.regex.equals(that.regex))
        return false;
    }

    boolean this_present_filedNameSplited = true && this.isSetFiledNameSplited();
    boolean that_present_filedNameSplited = true && that.isSetFiledNameSplited();
    if (this_present_filedNameSplited || that_present_filedNameSplited) {
      if (!(this_present_filedNameSplited && that_present_filedNameSplited))
        return false;
      if (!this.filedNameSplited.equals(that.filedNameSplited))
        return false;
    }

    boolean this_present_filedNameAES = true && this.isSetFiledNameAES();
    boolean that_present_filedNameAES = true && that.isSetFiledNameAES();
    if (this_present_filedNameAES || that_present_filedNameAES) {
      if (!(this_present_filedNameAES && that_present_filedNameAES))
        return false;
      if (!this.filedNameAES.equals(that.filedNameAES))
        return false;
    }

    boolean this_present_AESPriKey = true && this.isSetAESPriKey();
    boolean that_present_AESPriKey = true && that.isSetAESPriKey();
    if (this_present_AESPriKey || that_present_AESPriKey) {
      if (!(this_present_AESPriKey && that_present_AESPriKey))
        return false;
      if (!this.AESPriKey.equals(that.AESPriKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_requestType = true && (isSetRequestType());
    list.add(present_requestType);
    if (present_requestType)
      list.add(requestType.getValue());

    boolean present_path = true && (isSetPath());
    list.add(present_path);
    if (present_path)
      list.add(path);

    boolean present_securityLevel = true;
    list.add(present_securityLevel);
    if (present_securityLevel)
      list.add(securityLevel);

    boolean present_originStr = true && (isSetOriginStr());
    list.add(present_originStr);
    if (present_originStr)
      list.add(originStr);

    boolean present_regex = true && (isSetRegex());
    list.add(present_regex);
    if (present_regex)
      list.add(regex);

    boolean present_filedNameSplited = true && (isSetFiledNameSplited());
    list.add(present_filedNameSplited);
    if (present_filedNameSplited)
      list.add(filedNameSplited);

    boolean present_filedNameAES = true && (isSetFiledNameAES());
    list.add(present_filedNameAES);
    if (present_filedNameAES)
      list.add(filedNameAES);

    boolean present_AESPriKey = true && (isSetAESPriKey());
    list.add(present_AESPriKey);
    if (present_AESPriKey)
      list.add(AESPriKey);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataUploadRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequestType()).compareTo(other.isSetRequestType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestType, other.requestType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecurityLevel()).compareTo(other.isSetSecurityLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurityLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityLevel, other.securityLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginStr()).compareTo(other.isSetOriginStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originStr, other.originStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegex()).compareTo(other.isSetRegex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regex, other.regex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFiledNameSplited()).compareTo(other.isSetFiledNameSplited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiledNameSplited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedNameSplited, other.filedNameSplited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFiledNameAES()).compareTo(other.isSetFiledNameAES());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiledNameAES()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedNameAES, other.filedNameAES);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAESPriKey()).compareTo(other.isSetAESPriKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAESPriKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AESPriKey, other.AESPriKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataUploadRequest(");
    boolean first = true;

    sb.append("requestType:");
    if (this.requestType == null) {
      sb.append("null");
    } else {
      sb.append(this.requestType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("securityLevel:");
    sb.append(this.securityLevel);
    first = false;
    if (isSetOriginStr()) {
      if (!first) sb.append(", ");
      sb.append("originStr:");
      if (this.originStr == null) {
        sb.append("null");
      } else {
        sb.append(this.originStr);
      }
      first = false;
    }
    if (isSetRegex()) {
      if (!first) sb.append(", ");
      sb.append("regex:");
      if (this.regex == null) {
        sb.append("null");
      } else {
        sb.append(this.regex);
      }
      first = false;
    }
    if (isSetFiledNameSplited()) {
      if (!first) sb.append(", ");
      sb.append("filedNameSplited:");
      if (this.filedNameSplited == null) {
        sb.append("null");
      } else {
        sb.append(this.filedNameSplited);
      }
      first = false;
    }
    if (isSetFiledNameAES()) {
      if (!first) sb.append(", ");
      sb.append("filedNameAES:");
      if (this.filedNameAES == null) {
        sb.append("null");
      } else {
        sb.append(this.filedNameAES);
      }
      first = false;
    }
    if (isSetAESPriKey()) {
      if (!first) sb.append(", ");
      sb.append("AESPriKey:");
      if (this.AESPriKey == null) {
        sb.append("null");
      } else {
        sb.append(this.AESPriKey);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (requestType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'requestType' was not present! Struct: " + toString());
    }
    if (path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'path' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'securityLevel' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataUploadRequestStandardSchemeFactory implements SchemeFactory {
    public DataUploadRequestStandardScheme getScheme() {
      return new DataUploadRequestStandardScheme();
    }
  }

  private static class DataUploadRequestStandardScheme extends StandardScheme<DataUploadRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataUploadRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestType = com.bacon.clientThrift.entity.RequestType.findByValue(iprot.readI32());
              struct.setRequestTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECURITY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.securityLevel = iprot.readI32();
              struct.setSecurityLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORIGIN_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originStr = iprot.readString();
              struct.setOriginStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regex = iprot.readString();
              struct.setRegexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILED_NAME_SPLITED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.filedNameSplited = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.filedNameSplited.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFiledNameSplitedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILED_NAME_AES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.filedNameAES = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.filedNameAES.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setFiledNameAESIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AESPRI_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.AESPriKey = iprot.readString();
              struct.setAESPriKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSecurityLevel()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityLevel' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataUploadRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requestType != null) {
        oprot.writeFieldBegin(REQUEST_TYPE_FIELD_DESC);
        oprot.writeI32(struct.requestType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SECURITY_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.securityLevel);
      oprot.writeFieldEnd();
      if (struct.originStr != null) {
        if (struct.isSetOriginStr()) {
          oprot.writeFieldBegin(ORIGIN_STR_FIELD_DESC);
          oprot.writeString(struct.originStr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.regex != null) {
        if (struct.isSetRegex()) {
          oprot.writeFieldBegin(REGEX_FIELD_DESC);
          oprot.writeString(struct.regex);
          oprot.writeFieldEnd();
        }
      }
      if (struct.filedNameSplited != null) {
        if (struct.isSetFiledNameSplited()) {
          oprot.writeFieldBegin(FILED_NAME_SPLITED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.filedNameSplited.size()));
            for (String _iter6 : struct.filedNameSplited)
            {
              oprot.writeString(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.filedNameAES != null) {
        if (struct.isSetFiledNameAES()) {
          oprot.writeFieldBegin(FILED_NAME_AES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.filedNameAES.size()));
            for (String _iter7 : struct.filedNameAES)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.AESPriKey != null) {
        if (struct.isSetAESPriKey()) {
          oprot.writeFieldBegin(AESPRI_KEY_FIELD_DESC);
          oprot.writeString(struct.AESPriKey);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataUploadRequestTupleSchemeFactory implements SchemeFactory {
    public DataUploadRequestTupleScheme getScheme() {
      return new DataUploadRequestTupleScheme();
    }
  }

  private static class DataUploadRequestTupleScheme extends TupleScheme<DataUploadRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataUploadRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.requestType.getValue());
      oprot.writeString(struct.path);
      oprot.writeI32(struct.securityLevel);
      BitSet optionals = new BitSet();
      if (struct.isSetOriginStr()) {
        optionals.set(0);
      }
      if (struct.isSetRegex()) {
        optionals.set(1);
      }
      if (struct.isSetFiledNameSplited()) {
        optionals.set(2);
      }
      if (struct.isSetFiledNameAES()) {
        optionals.set(3);
      }
      if (struct.isSetAESPriKey()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOriginStr()) {
        oprot.writeString(struct.originStr);
      }
      if (struct.isSetRegex()) {
        oprot.writeString(struct.regex);
      }
      if (struct.isSetFiledNameSplited()) {
        {
          oprot.writeI32(struct.filedNameSplited.size());
          for (String _iter8 : struct.filedNameSplited)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetFiledNameAES()) {
        {
          oprot.writeI32(struct.filedNameAES.size());
          for (String _iter9 : struct.filedNameAES)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetAESPriKey()) {
        oprot.writeString(struct.AESPriKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataUploadRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.requestType = com.bacon.clientThrift.entity.RequestType.findByValue(iprot.readI32());
      struct.setRequestTypeIsSet(true);
      struct.path = iprot.readString();
      struct.setPathIsSet(true);
      struct.securityLevel = iprot.readI32();
      struct.setSecurityLevelIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.originStr = iprot.readString();
        struct.setOriginStrIsSet(true);
      }
      if (incoming.get(1)) {
        struct.regex = iprot.readString();
        struct.setRegexIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.filedNameSplited = new ArrayList<String>(_list10.size);
          String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.filedNameSplited.add(_elem11);
          }
        }
        struct.setFiledNameSplitedIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.filedNameAES = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.filedNameAES.add(_elem14);
          }
        }
        struct.setFiledNameAESIsSet(true);
      }
      if (incoming.get(4)) {
        struct.AESPriKey = iprot.readString();
        struct.setAESPriKeyIsSet(true);
      }
    }
  }

}

